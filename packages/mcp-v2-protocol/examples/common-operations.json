{
  "tool_execution": {
    "description": "Execute a tool with full context and intelligence",
    "request": {
      "id": "req-tool-001",
      "jsonrpc": "2.0",
      "method": "tools/call",
      "params": {
        "name": "java_compiler",
        "action": "compile",
        "arguments": {
          "project": "/workspace/mcp-orchestration",
          "module": "mcp-core",
          "target": "clean install",
          "options": {
            "skipTests": false,
            "verbose": true
          }
        }
      },
      "context": {
        "sessionId": "session-java-dev-001",
        "userId": "developer-123",
        "projectId": "mcp-orchestration",
        "taskType": "java-development",
        "expertise": "advanced",
        "preferences": {
          "verbosity": "detailed",
          "codeStyle": "oop",
          "errorHandling": "strict"
        },
        "history": [
          {
            "type": "error-pattern",
            "content": "Maven dependency resolution failed for mcp-shared module",
            "relevanceScore": 0.9,
            "timestamp": "2025-01-27T09:45:00Z",
            "tags": ["maven", "dependencies", "mcp-shared"]
          },
          {
            "type": "code-solution",
            "content": "Fixed parent POM reference to use mcp-orchestration-parent:1.0.0-SNAPSHOT",
            "relevanceScore": 0.8,
            "timestamp": "2025-01-27T09:50:00Z",
            "tags": ["maven", "pom", "parent-reference"]
          }
        ]
      },
      "metadata": {
        "timestamp": "2025-01-27T10:00:00Z",
        "source": {
          "language": "java",
          "framework": "spring-boot",
          "version": "2.1.0"
        },
        "routing": {
          "preferredServers": ["java-build-server-01"],
          "maxLatency": 30000,
          "priority": "high"
        },
        "tracing": {
          "traceId": "trace-java-build-001",
          "spanId": "span-compile-001",
          "parentSpanId": "span-session-001"
        }
      }
    },
    "response": {
      "id": "req-tool-001",
      "jsonrpc": "2.0",
      "result": {
        "output": "BUILD SUCCESS\n\nTotal time:  2.456 s\nFinished at: 2025-01-27T10:02:30Z",
        "exitCode": 0,
        "artifacts": [
          {
            "type": "file",
            "name": "mcp-core-1.0.0-SNAPSHOT.jar",
            "content": "UEsDBBQACAgIAOh8xVYAAAAAAAAAAAAAAAAJAAAATUVUQS1JTkYv...",
            "mimeType": "application/java-archive",
            "size": 1247360
          },
          {
            "type": "document",
            "name": "build-report.xml",
            "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>...",
            "mimeType": "application/xml",
            "size": 8192
          }
        ],
        "metrics": {
          "cpuTime": 2456,
          "memoryUsage": 134217728,
          "networkCalls": 3,
          "cacheHits": 15
        }
      },
      "metadata": {
        "timestamp": "2025-01-27T10:02:30Z",
        "processingTime": 150000,
        "serverId": "java-build-server-01",
        "serverVersion": "1.2.3",
        "cacheHit": false,
        "rateLimiting": {
          "remaining": 45,
          "resetTime": "2025-01-27T11:00:00Z"
        }
      },
      "intelligence": {
        "contextScore": 0.92,
        "adaptationApplied": true,
        "learningSignals": [
          {
            "type": "performance-metric",
            "value": 2.456,
            "weight": 0.8,
            "timestamp": "2025-01-27T10:02:30Z"
          },
          {
            "type": "user-satisfaction",
            "value": true,
            "weight": 1.0,
            "timestamp": "2025-01-27T10:02:30Z"
          }
        ],
        "nextActions": [
          "Run unit tests to verify build integrity",
          "Consider enabling incremental compilation for faster builds",
          "Update dependency versions to latest stable releases"
        ]
      }
    }
  },
  "context_management": {
    "description": "Store and retrieve intelligent context with AI enhancement",
    "store_request": {
      "id": "req-context-001",
      "jsonrpc": "2.0",
      "method": "context/store",
      "params": {
        "key": "user-workflow-preferences",
        "data": {
          "developmentFlow": "tdd",
          "testingStrategy": "junit5-mockito",
          "codeReviewStyle": "detailed",
          "deploymentPreference": "docker-compose"
        },
        "metadata": {
          "category": "user-preferences",
          "priority": "high",
          "expiry": "2025-07-27T10:00:00Z"
        }
      },
      "context": {
        "sessionId": "session-java-dev-001",
        "userId": "developer-123",
        "taskType": "system-architecture"
      }
    },
    "store_response": {
      "id": "req-context-001",
      "jsonrpc": "2.0",
      "result": {
        "operation": "store",
        "data": {
          "stored": true,
          "key": "user-workflow-preferences",
          "version": "1.0",
          "checksum": "sha256:a1b2c3d4..."
        },
        "suggestions": [
          "Consider storing IDE-specific preferences as well",
          "Link this workflow to your current project settings"
        ]
      }
    },
    "retrieve_request": {
      "id": "req-context-002",
      "jsonrpc": "2.0",
      "method": "context/retrieve",
      "params": {
        "key": "user-workflow-preferences",
        "includeMetadata": true
      },
      "context": {
        "sessionId": "session-java-dev-002",
        "userId": "developer-123",
        "taskType": "java-development"
      }
    },
    "retrieve_response": {
      "id": "req-context-002",
      "jsonrpc": "2.0",
      "result": {
        "operation": "retrieve",
        "data": {
          "developmentFlow": "tdd",
          "testingStrategy": "junit5-mockito",
          "codeReviewStyle": "detailed",
          "deploymentPreference": "docker-compose"
        },
        "relevance": 0.95,
        "suggestions": [
          "Apply TDD approach to current Java module development",
          "Set up JUnit 5 test structure for mcp-core module"
        ]
      },
      "intelligence": {
        "contextScore": 0.95,
        "adaptationApplied": true,
        "nextActions": [
          "Create test templates based on preferred testing strategy",
          "Configure Docker Compose for development environment"
        ]
      }
    }
  },
  "intelligence_enhancement": {
    "description": "AI-powered intelligence enhancement of requests and responses",
    "request": {
      "id": "req-intel-001",
      "jsonrpc": "2.0",
      "method": "intelligence/enhance",
      "params": {
        "operation": "code-review",
        "input": {
          "language": "java",
          "code": "public class UserService {\\n    private UserRepository repo;\\n    public User getUser(Long id) {\\n        return repo.findById(id);\\n    }\\n}",
          "context": "Spring Boot service layer"
        },
        "enhancementLevel": "comprehensive"
      },
      "context": {
        "sessionId": "session-review-001",
        "userId": "developer-123",
        "taskType": "debugging",
        "expertise": "intermediate"
      }
    },
    "response": {
      "id": "req-intel-001",
      "jsonrpc": "2.0",
      "result": {
        "enhanced": true,
        "insights": [
          {
            "type": "potential-issue",
            "message": "Missing null check - findById() may return null",
            "confidence": 0.9,
            "actionable": true
          },
          {
            "type": "best-practice",
            "message": "Consider using Optional<User> return type",
            "confidence": 0.85,
            "actionable": true
          },
          {
            "type": "optimization-opportunity",
            "message": "Add @Transactional annotation for better transaction management",
            "confidence": 0.7,
            "actionable": true
          }
        ],
        "recommendations": [
          {
            "action": "Replace return type with Optional<User>",
            "rationale": "Prevents NullPointerException and follows Java best practices",
            "priority": "high",
            "effort": "low",
            "impact": "high"
          },
          {
            "action": "Add proper error handling for user not found",
            "rationale": "Improves user experience and system reliability",
            "priority": "medium",
            "effort": "medium",
            "impact": "medium"
          }
        ],
        "confidence": 0.88
      },
      "intelligence": {
        "contextScore": 0.92,
        "adaptationApplied": true,
        "learningSignals": [
          {
            "type": "usage-pattern",
            "value": "java-service-layer-review",
            "weight": 0.9,
            "timestamp": "2025-01-27T10:05:00Z"
          }
        ]
      }
    }
  },
  "server_bridge": {
    "description": "Inter-server communication through bridge protocol",
    "request": {
      "id": "req-bridge-001",
      "jsonrpc": "2.0",
      "method": "server/bridge",
      "params": {
        "targetServer": "python-ml-engine",
        "bridgeMethod": "ml/predict",
        "bridgeParams": {
          "model": "code-quality-classifier",
          "input": {
            "language": "java",
            "codeSnippet": "public class Example { private String name; }",
            "metrics": {
              "complexity": 2,
              "linesOfCode": 1,
              "testCoverage": 0.0
            }
          }
        }
      },
      "context": {
        "sessionId": "session-ml-001",
        "taskType": "debugging",
        "preferences": {
          "verbosity": "normal"
        }
      }
    },
    "response": {
      "id": "req-bridge-001",
      "jsonrpc": "2.0",
      "result": {
        "bridged": true,
        "targetServer": "python-ml-engine",
        "response": {
          "prediction": {
            "qualityScore": 0.75,
            "category": "good",
            "improvements": [
              "Add getter/setter methods",
              "Consider making class final if no inheritance needed",
              "Add unit tests to improve coverage"
            ],
            "confidence": 0.89
          }
        },
        "route": [
          "java-server-01",
          "bridge-server-01", 
          "python-ml-engine",
          "bridge-server-01",
          "java-server-01"
        ]
      },
      "metadata": {
        "processingTime": 250,
        "serverId": "bridge-server-01"
      }
    }
  },
  "error_scenarios": {
    "description": "Common error scenarios with intelligent suggestions",
    "validation_error": {
      "request": {
        "id": "req-error-001",
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "file_manager",
          "_comment": "Missing required 'action' parameter"
        }
      },
      "response": {
        "id": "req-error-001",
        "jsonrpc": "2.0",
        "error": {
          "code": -32602,
          "message": "Invalid parameters",
          "data": {
            "type": "validation-error",
            "details": "Missing required parameter: 'action'",
            "suggestions": [
              "Add 'action' parameter with value like 'create', 'read', 'update', or 'delete'",
              "Check the tool documentation for required parameters",
              "Use 'tools/describe' method to get parameter schema"
            ]
          }
        }
      }
    },
    "timeout_error": {
      "response": {
        "id": "req-timeout-001",
        "jsonrpc": "2.0",
        "error": {
          "code": -32000,
          "message": "Request timeout",
          "data": {
            "type": "timeout-error",
            "details": "Operation exceeded maximum execution time of 30 seconds",
            "suggestions": [
              "Break down the operation into smaller chunks",
              "Increase timeout limit if operation is expected to take longer",
              "Check if the target system is responsive"
            ]
          }
        }
      }
    },
    "rate_limit_error": {
      "response": {
        "id": "req-rate-001",
        "jsonrpc": "2.0",
        "error": {
          "code": -32003,
          "message": "Rate limit exceeded",
          "data": {
            "type": "rate-limit-error",
            "details": "Exceeded maximum of 60 requests per minute",
            "suggestions": [
              "Wait 45 seconds before making next request",
              "Implement exponential backoff for retries",
              "Consider batching multiple operations together"
            ]
          }
        },
        "metadata": {
          "rateLimiting": {
            "remaining": 0,
            "resetTime": "2025-01-27T10:01:00Z"
          }
        }
      }
    }
  }
}
