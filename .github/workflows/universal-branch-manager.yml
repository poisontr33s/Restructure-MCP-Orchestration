name: Universal Branch Manager

on:
  workflow_dispatch:
    inputs:
      operation:
        description: 'Operation to perform'
        required: true
        default: 'cleanup'
        type: choice
        options:
          - cleanup
          - list
          - dry-run
      repositories:
        description: 'Target repositories (comma-separated or "ALL")'
        required: true
        default: 'ALL'
        type: string
      branch_pattern:
        description: 'Branch pattern to match (e.g., copilot/*, feature/*)'
        required: true
        default: 'copilot/*'
        type: string
      exclude_patterns:
        description: 'Patterns to exclude (comma-separated)'
        required: false
        default: 'main,master,develop,production'
        type: string
      min_age_days:
        description: 'Minimum age in days before deletion'
        required: false
        default: '7'
        type: string
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  pull_request:
    types: [closed]
    branches: [main]

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  discover-repositories:
    name: Discover Target Repositories
    runs-on: ubuntu-latest
    outputs:
      repositories: ${{ steps.discover.outputs.repositories }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Discover repositories
        id: discover
        run: |
          echo "Discovering repositories for organization..."
          
          if [ "${{ inputs.repositories }}" = "ALL" ] || [ "${{ inputs.repositories }}" = "" ]; then
            # Get all repositories in the organization
            REPOS=$(gh repo list poisontr33s --json name --jq '.[].name' | tr '\n' ',' | sed 's/,$//')
          else
            # Use specified repositories
            REPOS="${{ inputs.repositories }}"
          fi
          
          echo "Target repositories: $REPOS"
          echo "repositories=$REPOS" >> $GITHUB_OUTPUT

  manage-branches:
    name: Manage Branches (${{ matrix.repository }})
    runs-on: ubuntu-latest
    needs: discover-repositories
    if: needs.discover-repositories.outputs.repositories != ''
    strategy:
      fail-fast: false
      matrix:
        repository: ${{ fromJson(format('["{0}"]', needs.discover-repositories.outputs.repositories)) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup branch management parameters
        id: params
        run: |
          # Set defaults for scheduled runs
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "operation=cleanup" >> $GITHUB_OUTPUT
            echo "branch_pattern=copilot/*" >> $GITHUB_OUTPUT
            echo "exclude_patterns=main,master,develop,production" >> $GITHUB_OUTPUT
            echo "min_age_days=7" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "operation=cleanup" >> $GITHUB_OUTPUT
            echo "branch_pattern=${{ github.head_ref }}" >> $GITHUB_OUTPUT
            echo "exclude_patterns=main,master,develop,production" >> $GITHUB_OUTPUT
            echo "min_age_days=0" >> $GITHUB_OUTPUT
          else
            echo "operation=${{ inputs.operation }}" >> $GITHUB_OUTPUT
            echo "branch_pattern=${{ inputs.branch_pattern }}" >> $GITHUB_OUTPUT
            echo "exclude_patterns=${{ inputs.exclude_patterns }}" >> $GITHUB_OUTPUT
            echo "min_age_days=${{ inputs.min_age_days }}" >> $GITHUB_OUTPUT
          fi
          
      - name: List branches matching pattern
        id: list
        run: |
          echo "Processing repository: ${{ matrix.repository }}"
          
          # Get all branches from the repository
          BRANCHES=$(gh api repos/poisontr33s/${{ matrix.repository }}/branches --jq '.[].name' 2>/dev/null || echo "")
          
          if [ -z "$BRANCHES" ]; then
            echo "No branches found or repository not accessible"
            echo "branches=" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Filter branches by pattern
          PATTERN="${{ steps.params.outputs.branch_pattern }}"
          EXCLUDE_PATTERNS="${{ steps.params.outputs.exclude_patterns }}"
          MIN_AGE_DAYS="${{ steps.params.outputs.min_age_days }}"
          
          FILTERED_BRANCHES=""
          
          for branch in $BRANCHES; do
            # Skip if branch matches exclude patterns
            SKIP=false
            IFS=',' read -ra EXCLUDES <<< "$EXCLUDE_PATTERNS"
            for exclude in "${EXCLUDES[@]}"; do
              if [[ "$branch" == "$exclude" ]]; then
                SKIP=true
                break
              fi
            done
            
            if [ "$SKIP" = true ]; then
              continue
            fi
            
            # Check if branch matches the pattern
            if [[ "$PATTERN" == *"*" ]]; then
              # Wildcard pattern
              PREFIX=${PATTERN%/*}
              if [[ "$branch" == "$PREFIX"* ]]; then
                # Check age if specified
                if [ "$MIN_AGE_DAYS" -gt 0 ]; then
                  LAST_COMMIT=$(gh api repos/poisontr33s/${{ matrix.repository }}/branches/$branch --jq '.commit.commit.committer.date' 2>/dev/null || echo "")
                  if [ -n "$LAST_COMMIT" ]; then
                    COMMIT_DATE=$(date -d "$LAST_COMMIT" +%s)
                    CURRENT_DATE=$(date +%s)
                    AGE_DAYS=$(( (CURRENT_DATE - COMMIT_DATE) / 86400 ))
                    
                    if [ "$AGE_DAYS" -lt "$MIN_AGE_DAYS" ]; then
                      echo "Skipping $branch (age: $AGE_DAYS days, minimum: $MIN_AGE_DAYS days)"
                      continue
                    fi
                  fi
                fi
                
                FILTERED_BRANCHES="$FILTERED_BRANCHES $branch"
              fi
            elif [[ "$branch" == "$PATTERN" ]]; then
              # Exact match
              FILTERED_BRANCHES="$FILTERED_BRANCHES $branch"
            fi
          done
          
          echo "Filtered branches: $FILTERED_BRANCHES"
          echo "branches=$FILTERED_BRANCHES" >> $GITHUB_OUTPUT
          
      - name: Check for open pull requests
        id: check-prs
        run: |
          BRANCHES="${{ steps.list.outputs.branches }}"
          SAFE_BRANCHES=""
          
          for branch in $BRANCHES; do
            # Check if branch has open PRs
            PRS=$(gh api repos/poisontr33s/${{ matrix.repository }}/pulls --jq ".[] | select(.head.ref == \"$branch\") | .number" 2>/dev/null || echo "")
            
            if [ -n "$PRS" ]; then
              echo "Branch $branch has open PR(s): $PRS - skipping deletion"
            else
              SAFE_BRANCHES="$SAFE_BRANCHES $branch"
            fi
          done
          
          echo "Safe to delete: $SAFE_BRANCHES"
          echo "safe_branches=$SAFE_BRANCHES" >> $GITHUB_OUTPUT
          
      - name: Execute branch operation
        run: |
          OPERATION="${{ steps.params.outputs.operation }}"
          BRANCHES="${{ steps.check-prs.outputs.safe_branches }}"
          
          if [ -z "$BRANCHES" ]; then
            echo "No branches to process for repository ${{ matrix.repository }}"
            exit 0
          fi
          
          echo "Operation: $OPERATION"
          echo "Repository: ${{ matrix.repository }}"
          echo "Branches: $BRANCHES"
          
          case "$OPERATION" in
            "list")
              echo "Branches that would be affected:"
              for branch in $BRANCHES; do
                echo "  - $branch"
              done
              ;;
              
            "dry-run")
              echo "DRY RUN - Would delete the following branches:"
              for branch in $BRANCHES; do
                echo "  - Would delete: $branch"
              done
              ;;
              
            "cleanup")
              echo "Deleting branches..."
              for branch in $BRANCHES; do
                echo "Deleting branch: $branch"
                if gh api -X DELETE repos/poisontr33s/${{ matrix.repository }}/git/refs/heads/$branch 2>/dev/null; then
                  echo "✅ Successfully deleted: $branch"
                else
                  echo "❌ Failed to delete: $branch"
                fi
              done
              ;;
              
            *)
              echo "Unknown operation: $OPERATION"
              exit 1
              ;;
          esac
          
      - name: Create audit log
        if: always()
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          OPERATION="${{ steps.params.outputs.operation }}"
          BRANCHES="${{ steps.check-prs.outputs.safe_branches }}"
          
          echo "## Branch Management Audit Log" >> audit-log.md
          echo "**Timestamp:** $TIMESTAMP" >> audit-log.md
          echo "**Repository:** ${{ matrix.repository }}" >> audit-log.md
          echo "**Operation:** $OPERATION" >> audit-log.md
          echo "**Trigger:** ${{ github.event_name }}" >> audit-log.md
          echo "**Pattern:** ${{ steps.params.outputs.branch_pattern }}" >> audit-log.md
          echo "**Excluded:** ${{ steps.params.outputs.exclude_patterns }}" >> audit-log.md
          echo "**Min Age:** ${{ steps.params.outputs.min_age_days }} days" >> audit-log.md
          echo "**Processed Branches:**" >> audit-log.md
          
          if [ -n "$BRANCHES" ]; then
            for branch in $BRANCHES; do
              echo "  - $branch" >> audit-log.md
            done
          else
            echo "  - None" >> audit-log.md
          fi
          
          echo "" >> audit-log.md
          
      - name: Upload audit log
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: branch-audit-log-${{ matrix.repository }}-${{ github.sha }}
          path: audit-log.md
          retention-days: 30
          if-no-files-found: warn

  summary:
    name: Operation Summary
    runs-on: ubuntu-latest
    needs: [discover-repositories, manage-branches]
    if: always()
    
    steps:
      - name: Download all audit logs
        uses: actions/download-artifact@v4
        with:
          pattern: branch-audit-log-*-${{ github.sha }}
          path: audit-logs/
          merge-multiple: true
          
      - name: Create summary report
        run: |
          echo "# Universal Branch Management Summary" > summary.md
          echo "" >> summary.md
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> summary.md
          echo "**Trigger:** ${{ github.event_name }}" >> summary.md
          echo "**Operation:** ${{ inputs.operation || 'scheduled cleanup' }}" >> summary.md
          echo "" >> summary.md
          
          if [ -d "audit-logs" ] && [ "$(ls -A audit-logs/)" ]; then
            echo "## Repository Results" >> summary.md
            for log in audit-logs/*.md; do
              if [ -f "$log" ]; then
                cat "$log" >> summary.md
                echo "" >> summary.md
              fi
            done
          else
            echo "No audit logs found." >> summary.md
          fi
          
      - name: Upload summary report
        uses: actions/upload-artifact@v4
        with:
          name: branch-management-summary-${{ github.sha }}
          path: summary.md
          retention-days: 90
          if-no-files-found: warn