name: Agent - Gemini (Enhanced CLI & Code Assistant)

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Gemini operation mode'
        required: true
        default: 'scout'
        type: choice
        options:
          - scout
          - cli
          - assistant
          - analyze
          - chat
      target:
        description: 'Target file or directory (optional)'
        required: false
        type: string
      prompt:
        description: 'Custom prompt or command'
        required: false
        type: string
  issues:
    types: [labeled]
  pull_request:
    types: [labeled]
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  gemini-dispatch:
    if: |
      (github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'issues' && contains(github.event.label.name, 'agent:gemini')) ||
      (github.event_name == 'pull_request' && contains(github.event.label.name, 'agent:gemini')) ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@gemini')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@gemini'))
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install
          # Ensure Gemini packages are available
          npm install @google/generative-ai @ai-sdk/google @google/genai

      - name: Determine operation mode
        id: mode
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "mode=${{ github.event.inputs.mode }}" >> $GITHUB_OUTPUT
            echo "target=${{ github.event.inputs.target }}" >> $GITHUB_OUTPUT
            echo "prompt=${{ github.event.inputs.prompt }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.comment.body || '' }}" =~ @gemini[[:space:]]+([a-zA-Z]+) ]]; then
            echo "mode=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            echo "prompt=${{ github.event.comment.body }}" >> $GITHUB_OUTPUT
          else
            echo "mode=scout" >> $GITHUB_OUTPUT
          fi

      - name: Run Gemini Scout (Intelligence Gathering)
        if: steps.mode.outputs.mode == 'scout'
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          echo "üîç Executing Gemini Strategic Reconnaissance..."
          node scripts/gemini-scout.js

      - name: Run Gemini CLI
        if: steps.mode.outputs.mode == 'cli'
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          echo "ü§ñ Executing Gemini CLI..."
          if [ -n "${{ steps.mode.outputs.prompt }}" ]; then
            node scripts/gemini-cli.js ${{ steps.mode.outputs.prompt }}
          else
            node scripts/gemini-cli.js help
          fi

      - name: Run Gemini Code Assistant
        if: steps.mode.outputs.mode == 'assistant'
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          echo "üë®‚Äçüíª Executing Gemini Code Assistant..."
          if [ -n "${{ steps.mode.outputs.target }}" ]; then
            node scripts/gemini-code-assistant.js analyze "${{ steps.mode.outputs.target }}"
          else
            node scripts/gemini-code-assistant.js help
          fi

      - name: Run Code Analysis
        if: steps.mode.outputs.mode == 'analyze'
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          echo "üìä Executing Code Analysis..."
          if [ -n "${{ steps.mode.outputs.target }}" ]; then
            node scripts/gemini-cli.js analyze --file="${{ steps.mode.outputs.target }}"
          else
            echo "Analyzing entire project structure..."
            node scripts/gemini-scout.js
          fi

      - name: Interactive Chat Mode
        if: steps.mode.outputs.mode == 'chat'
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          echo "üí¨ Gemini Chat Mode - Processing request..."
          if [ -n "${{ steps.mode.outputs.prompt }}" ]; then
            echo "Request: ${{ steps.mode.outputs.prompt }}"
            # Process the chat request through CLI
            node scripts/gemini-cli.js generate "${{ steps.mode.outputs.prompt }}"
          else
            echo "No prompt provided for chat mode"
          fi

      - name: Post Results Comment
        if: github.event_name == 'issues' || github.event_name == 'pull_request' || github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const mode = '${{ steps.mode.outputs.mode }}';
            const hasApiKey = '${{ secrets.GOOGLE_API_KEY }}' !== '';
            
            let message = `ü§ñ **Gemini AI Assistant Response**\n\n`;
            message += `**Mode:** ${mode}\n`;
            message += `**API Status:** ${hasApiKey ? '‚úÖ Connected' : '‚ö†Ô∏è Offline mode'}\n\n`;
            
            if (mode === 'scout') {
              message += `üîç **Strategic Reconnaissance Complete**\n`;
              message += `- Repository analysis performed\n`;
              message += `- Security audit completed\n`;
              message += `- Performance opportunities identified\n`;
              message += `- Innovation readiness assessed\n\n`;
            } else if (mode === 'cli') {
              message += `‚å®Ô∏è **CLI Command Executed**\n`;
              message += `- Command line interface utilized\n`;
              message += `- Processing completed\n\n`;
            } else if (mode === 'assistant') {
              message += `üë®‚Äçüíª **Code Assistant Activated**\n`;
              message += `- IDE-style assistance provided\n`;
              message += `- Code analysis and suggestions available\n\n`;
            }
            
            if (!hasApiKey) {
              message += `‚öôÔ∏è **Setup Required:**\n`;
              message += `- Add \`GOOGLE_API_KEY\` to repository secrets for full functionality\n`;
              message += `- Current mode: Offline analysis with limited features\n\n`;
            }
            
            message += `**Available Commands:**\n`;
            message += `- \`@gemini scout\` - Strategic reconnaissance\n`;
            message += `- \`@gemini analyze <file>\` - Code analysis\n`;
            message += `- \`@gemini assistant\` - Interactive code assistance\n`;
            message += `- \`@gemini chat <prompt>\` - Natural language requests\n\n`;
            message += `**CLI Tools Available:**\n`;
            message += `- \`pnpm gemini:cli\` - Official-style CLI interface\n`;
            message += `- \`pnpm gemini:assistant\` - IDE-style code assistant\n`;
            message += `- \`pnpm gemini:scout\` - Intelligence gathering\n`;
            
            const issueNumber = context.issue?.number || context.payload.pull_request?.number;
            if (issueNumber) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: message
              });
            }

      - name: Commit any generated files
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Gemini AI Assistant"
          
          # Check if there are any changes to commit
          if ! git diff --quiet; then
            git add .
            git commit -m "ü§ñ Gemini AI: ${{ steps.mode.outputs.mode }} operation results" || echo "No changes to commit"
            git push
          else
            echo "No changes to commit"
          fi