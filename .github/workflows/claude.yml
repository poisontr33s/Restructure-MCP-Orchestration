name: Claude Code CLI Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      analysis_scope:
        description: 'Scope of Claude analysis'
        required: true
        default: 'incremental'
        type: choice
        options:
        - incremental      # Only changed files
        - package-focused  # Specific package
        - full-codebase   # Entire codebase
      target_package:
        description: 'Package to analyze (for package-focused scope)'
        required: false
        type: string
      analysis_focus:
        description: 'Analysis focus area'
        required: true
        default: 'code-quality'
        type: choice
        options:
        - code-quality    # Code review and best practices
        - architecture    # System design and architecture
        - performance     # Performance optimization
        - refactoring     # Refactoring suggestions

env:
  NODE_VERSION: '18'

jobs:
  # Intelligent change detection for optimal resource usage
  analyze-scope:
    name: Determine Analysis Scope
    runs-on: ubuntu-latest
    outputs:
      analysis_files: ${{ steps.scope.outputs.analysis_files }}
      should_run: ${{ steps.scope.outputs.should_run }}
      scope_summary: ${{ steps.scope.outputs.scope_summary }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 50  # Sufficient history for change detection
          
      - name: Determine analysis scope
        id: scope
        run: |
          # Smart scope detection to minimize unnecessary runs (addresses PR #69 optimization goals)
          analysis_scope="${{ github.event.inputs.analysis_scope || 'incremental' }}"
          target_package="${{ github.event.inputs.target_package }}"
          
          case "$analysis_scope" in
            "incremental")
              if [ "${{ github.event_name }}" = "pull_request" ]; then
                # Analyze only changed files in PR
                changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '\.(ts|tsx|js|jsx)$' || true)
              else
                # Analyze changed files in recent commit
                changed_files=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(ts|tsx|js|jsx)$' || true)
              fi
              
              if [ -n "$changed_files" ]; then
                # Convert to JSON array for easier processing
                files_array=$(echo "$changed_files" | jq -R -s -c 'split("\n")[:-1]')
                echo "analysis_files=$files_array" >> $GITHUB_OUTPUT
                echo "should_run=true" >> $GITHUB_OUTPUT
                echo "scope_summary=Incremental analysis of $(echo "$changed_files" | wc -l) changed files" >> $GITHUB_OUTPUT
              else
                echo "analysis_files=[]" >> $GITHUB_OUTPUT
                echo "should_run=false" >> $GITHUB_OUTPUT
                echo "scope_summary=No relevant source files changed" >> $GITHUB_OUTPUT
              fi
              ;;
              
            "package-focused")
              if [ -n "$target_package" ] && [ -d "packages/$target_package" ]; then
                # Analyze specific package
                package_files=$(find "packages/$target_package" -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" | jq -R -s -c 'split("\n")[:-1]')
                echo "analysis_files=$package_files" >> $GITHUB_OUTPUT
                echo "should_run=true" >> $GITHUB_OUTPUT
                echo "scope_summary=Package-focused analysis of $target_package" >> $GITHUB_OUTPUT
              else
                echo "analysis_files=[]" >> $GITHUB_OUTPUT
                echo "should_run=false" >> $GITHUB_OUTPUT
                echo "scope_summary=Invalid or missing target package: $target_package" >> $GITHUB_OUTPUT
              fi
              ;;
              
            "full-codebase")
              # Analyze entire codebase (use sparingly)
              all_files=$(find packages -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" | jq -R -s -c 'split("\n")[:-1]')
              echo "analysis_files=$all_files" >> $GITHUB_OUTPUT
              echo "should_run=true" >> $GITHUB_OUTPUT
              echo "scope_summary=Full codebase analysis (all packages)" >> $GITHUB_OUTPUT
              ;;
          esac

  claude-analysis:
    name: Claude Code Analysis
    runs-on: ubuntu-latest
    needs: analyze-scope
    if: needs.analyze-scope.outputs.should_run == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 100  # More context for better analysis
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Install Claude CI tool
        run: npm install -g @mneuhaus/claude-ci@latest
        
      # CLAUDE CLI CREDENTIAL SETUP
      # Requires ANTHROPIC_API_KEY secret to be configured in repository settings
      # See: https://docs.anthropic.com/en/api/getting-started
      - name: Configure Claude credentials
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          if [ -z "$ANTHROPIC_API_KEY" ]; then
            echo "⚠️  ANTHROPIC_API_KEY secret not configured. Skipping analysis."
            echo "Please add ANTHROPIC_API_KEY to repository secrets to enable Claude analysis."
            exit 0
          fi
          
          # Export API key for Claude CLI
          echo "ANTHROPIC_API_KEY=$ANTHROPIC_API_KEY" >> $GITHUB_ENV
          
      - name: Prepare analysis context
        id: context
        run: |
          analysis_focus="${{ github.event.inputs.analysis_focus || 'code-quality' }}"
          analysis_files='${{ needs.analyze-scope.outputs.analysis_files }}'
          
          echo "analysis_focus=$analysis_focus" >> $GITHUB_OUTPUT
          
          # Create focused prompts based on analysis focus
          case "$analysis_focus" in
            "code-quality")
              prompt="Analyze this TypeScript/JavaScript code for code quality and maintainability, TypeScript best practices and type safety, error handling patterns, code organization and structure, potential bugs or issues, and ESLint rule compliance. Provide specific, actionable recommendations with code examples where helpful."
              ;;
              
            "architecture")
              prompt="Review the system architecture and design patterns including module organization and dependencies, design patterns usage, separation of concerns, API design and interfaces, scalability considerations, and architecture anti-patterns. Focus on high-level structural improvements and design recommendations."
              ;;
              
            "performance")
              prompt="Analyze code for performance optimization opportunities including algorithmic complexity, memory usage patterns, async/await usage, bundle size considerations, database query patterns (if applicable), and performance bottlenecks. Suggest specific optimizations with performance impact estimates."
              ;;
              
            "refactoring")
              prompt="Identify refactoring opportunities including code duplication, long functions/classes, complex conditional logic, naming improvements, extract method/class opportunities, and modern JavaScript/TypeScript features adoption. Provide step-by-step refactoring guidance."
              ;;
          esac
          
          echo "prompt<<EOF" >> $GITHUB_OUTPUT
          echo "$prompt" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Prepare file list for analysis
          echo "$analysis_files" | jq -r '.[]' > analysis_files.txt
          file_count=$(wc -l < analysis_files.txt)
          echo "file_count=$file_count" >> $GITHUB_OUTPUT
          
      - name: Run Claude analysis
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          if [ -z "$ANTHROPIC_API_KEY" ]; then
            echo "⚠️  Skipping analysis - ANTHROPIC_API_KEY not configured"
            echo "## Claude Analysis Skipped" > claude-analysis-results.md
            echo "ANTHROPIC_API_KEY secret not configured." >> claude-analysis-results.md
            exit 0
          fi
          
          analysis_focus="${{ steps.context.outputs.analysis_focus }}"
          file_count="${{ steps.context.outputs.file_count }}"
          scope_summary="${{ needs.analyze-scope.outputs.scope_summary }}"
          
          echo "🔍 Running Claude analysis - $analysis_focus"
          echo "📊 Analysis scope: $scope_summary"
          echo "📁 Files to analyze: $file_count"
          echo ""
          
          # Create comprehensive analysis prompt
          echo "Claude Code Analysis" > analysis_prompt.txt
          echo "" >> analysis_prompt.txt
          echo "Analysis Focus:" >> analysis_prompt.txt
          echo "The focus of this analysis is to examine TypeScript/JavaScript code for the specified criteria and provide actionable recommendations." >> analysis_prompt.txt
          echo "" >> analysis_prompt.txt
          echo "Project Context:" >> analysis_prompt.txt
          echo "This is a TypeScript monorepo for MCP (Model Context Protocol) orchestration system with packages:" >> analysis_prompt.txt
          echo "* core: Core orchestration functionality" >> analysis_prompt.txt
          echo "* cli: Command-line interface" >> analysis_prompt.txt
          echo "* monitor: System monitoring and dashboard" >> analysis_prompt.txt
          echo "* shared: Shared utilities and types" >> analysis_prompt.txt
          echo "* servers: Various MCP server implementations" >> analysis_prompt.txt
          echo "" >> analysis_prompt.txt
          echo "Instructions:" >> analysis_prompt.txt
          echo "Please analyze the provided code files and provide detailed, specific recommendations based on the analysis focus area." >> analysis_prompt.txt
          echo "" >> analysis_prompt.txt
          
          # Add the specific prompt based on analysis focus
          echo "$prompt" >> analysis_prompt.txt
          echo "" >> analysis_prompt.txt
          echo "Analysis Scope: $scope_summary" >> analysis_prompt.txt
          echo "" >> analysis_prompt.txt
          
          # Add file contents to prompt for context-aware analysis
          echo "Analyzing the following files:" >> analysis_prompt.txt
          
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              echo "" >> analysis_prompt.txt
              echo "### $file" >> analysis_prompt.txt
              echo '```typescript' >> analysis_prompt.txt
              cat "$file" >> analysis_prompt.txt
              echo '```' >> analysis_prompt.txt
            fi
          done < analysis_files.txt
          
          # Run Claude analysis with context and logging
          echo "🤖 Executing Claude analysis..."
          claude-ci \
            --log "claude-analysis.log" \
            --retry \
            < analysis_prompt.txt > claude-analysis-results.md 2>&1 || {
              echo "⚠️  Claude analysis encountered issues. Check logs for details."
              echo "## Claude Analysis Issues" > claude-analysis-results.md
              echo "The analysis encountered issues. See workflow logs for details." >> claude-analysis-results.md
              if [ -f "claude-analysis.log" ]; then
                echo "### Error Log" >> claude-analysis-results.md
                echo '```' >> claude-analysis-results.md
                tail -50 claude-analysis.log >> claude-analysis-results.md
                echo '```' >> claude-analysis-results.md
              fi
            }
          
          # Validate and format results
          if [ -f "claude-analysis-results.md" ] && [ -s "claude-analysis-results.md" ]; then
            echo "✅ Claude analysis completed successfully"
            echo ""
            echo "## Analysis Preview"
            head -30 claude-analysis-results.md
          else
            echo "❌ No analysis results generated"
            echo "## Claude Analysis Failed" > claude-analysis-results.md
            echo "No results were generated. This could be due to:" >> claude-analysis-results.md
            echo "- API connectivity issues" >> claude-analysis-results.md
            echo "- Invalid API key" >> claude-analysis-results.md
            echo "- Service unavailability" >> claude-analysis-results.md
          fi
          
      - name: Process and enhance results
        run: |
          # Create enhanced analysis report with metadata
          echo "# Claude Code Analysis Report" > enhanced-claude-analysis.md
          echo "" >> enhanced-claude-analysis.md
          echo "**Generated:** $(date)" >> enhanced-claude-analysis.md
          echo "**Commit:** ${{ github.sha }}" >> enhanced-claude-analysis.md
          echo "**Analysis Focus:** ${{ steps.context.outputs.analysis_focus }}" >> enhanced-claude-analysis.md
          echo "**Scope:** ${{ needs.analyze-scope.outputs.scope_summary }}" >> enhanced-claude-analysis.md
          echo "**Files Analyzed:** ${{ steps.context.outputs.file_count }}" >> enhanced-claude-analysis.md
          echo "" >> enhanced-claude-analysis.md
          echo "---" >> enhanced-claude-analysis.md
          echo "" >> enhanced-claude-analysis.md
          
          # Append the actual analysis results
          if [ -f "claude-analysis-results.md" ]; then
            cat claude-analysis-results.md >> enhanced-claude-analysis.md
          fi
          
          # Add file list for reference
          echo "" >> enhanced-claude-analysis.md
          echo "---" >> enhanced-claude-analysis.md
          echo "## Analyzed Files" >> enhanced-claude-analysis.md
          echo "" >> enhanced-claude-analysis.md
          while IFS= read -r file; do
            echo "- \`$file\`" >> enhanced-claude-analysis.md
          done < analysis_files.txt
          
      # ARTIFACT V4 COMPATIBILITY NOTE:
      # Claude analysis results with unique naming for artifact management
      # Includes analysis focus and commit SHA to prevent conflicts
      - name: Upload Claude analysis results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: claude-analysis-${{ steps.context.outputs.analysis_focus }}-${{ github.sha }}
          path: |
            enhanced-claude-analysis.md
            claude-analysis.log
          retention-days: 30
          if-no-files-found: warn
          
      - name: Create analysis summary
        id: summary
        run: |
          # Extract key insights for PR comment
          if [ -f "enhanced-claude-analysis.md" ]; then
            # Create a concise summary for PR comments
            summary=$(head -100 enhanced-claude-analysis.md | tail -80)
            
            # Escape for GitHub Actions output
            summary="${summary//'%'/'%25'}"
            summary="${summary//$'\n'/'%0A'}"
            summary="${summary//$'\r'/'%0D'}"
            
            echo "summary=$summary" >> $GITHUB_OUTPUT
            echo "has_results=true" >> $GITHUB_OUTPUT
          else
            echo "has_results=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Comment on PR with Claude analysis
        if: github.event_name == 'pull_request' && steps.summary.outputs.has_results == 'true' && github.token
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (fs.existsSync('enhanced-claude-analysis.md')) {
              let analysis = fs.readFileSync('enhanced-claude-analysis.md', 'utf8');
              
              // Truncate if too long for GitHub comment
              if (analysis.length > 65000) {
                analysis = analysis.substring(0, 65000) + '\n\n... (analysis truncated - see artifacts for full report)';
              }
              
              const comment = "## 🤖 Claude Code Analysis Results\n\n" +
                            "**Analysis Focus:** ${{ steps.context.outputs.analysis_focus }}\n" +
                            "**Scope:** ${{ needs.analyze-scope.outputs.scope_summary }}\n\n" +
                            analysis + "\n\n" +
                            "---\n" +
                            "*Full analysis report available in workflow artifacts*";

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # Summary job for workflow status
  analysis-summary:
    name: Analysis Summary
    runs-on: ubuntu-latest
    needs: [analyze-scope, claude-analysis]
    if: always()
    
    steps:
      - name: Generate workflow summary
        run: |
          echo "## Claude Code Analysis Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scope:** ${{ needs.analyze-scope.outputs.scope_summary }}" >> $GITHUB_STEP_SUMMARY
          echo "**Should Run:** ${{ needs.analyze-scope.outputs.should_run }}" >> $GITHUB_STEP_SUMMARY
          echo "**Analysis Result:** ${{ needs.claude-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.analyze-scope.outputs.should_run }}" = "true" ]; then
            echo "✅ Analysis scope determined and execution attempted" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.claude-analysis.result }}" = "success" ]; then
              echo "✅ Claude analysis completed successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ Claude analysis encountered issues - check logs" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ Analysis skipped - no relevant changes detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Setup Requirements" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Node.js ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ pnpm package manager" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ @mneuhaus/claude-ci installed" >> $GITHUB_STEP_SUMMARY
          echo "- 🔐 ANTHROPIC_API_KEY secret (configure in repo settings)" >> $GITHUB_STEP_SUMMARY