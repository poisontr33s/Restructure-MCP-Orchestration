# Multi-stage Dockerfile for MCP v2 Repository-OS
# Creates a complete development environment for polyglot development

# =================================================================
# BASE STAGE: Ubuntu with essential tools
# =================================================================
FROM ubuntu:22.04 as base

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Install base system packages
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    vim \
    nano \
    htop \
    tree \
    jq \
    unzip \
    zip \
    build-essential \
    pkg-config \
    ca-certificates \
    gnupg \
    lsb-release \
    software-properties-common \
    apt-transport-https \
    && rm -rf /var/lib/apt/lists/*

# =================================================================
# DEVELOPMENT TOOLS STAGE
# =================================================================
FROM base as dev-tools

# Install Node.js and npm
ARG NODE_VERSION=20.11.0
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g pnpm yarn typescript ts-node nodemon

# Install Java (OpenJDK)
ARG JAVA_VERSION=21
RUN apt-get update && apt-get install -y \
    openjdk-${JAVA_VERSION}-jdk \
    maven \
    gradle \
    && rm -rf /var/lib/apt/lists/*

# Install Python with modern tooling
ARG PYTHON_VERSION=3.12
RUN add-apt-repository ppa:deadsnakes/ppa \
    && apt-get update \
    && apt-get install -y \
        python${PYTHON_VERSION} \
        python${PYTHON_VERSION}-dev \
        python${PYTHON_VERSION}-venv \
        python3-pip \
        python3-setuptools \
        python3-wheel \
    && rm -rf /var/lib/apt/lists/* \
    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${PYTHON_VERSION} 1 \
    && python3 -m pip install --upgrade pip setuptools wheel \
    && python3 -m pip install poetry pipenv virtualenv

# Install Go
RUN GO_VERSION=1.21.6 \
    && curl -L "https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz" | tar -xz -C /usr/local \
    && echo 'export PATH=/usr/local/go/bin:$PATH' >> /etc/bash.bashrc

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
    && echo 'source ~/.cargo/env' >> /etc/bash.bashrc

# =================================================================
# DEVELOPMENT ENVIRONMENT STAGE
# =================================================================
FROM dev-tools as development

# Create development user
ARG USER_ID=1000
ARG GROUP_ID=1000
RUN groupadd -g ${GROUP_ID} dev \
    && useradd -l -u ${USER_ID} -g dev -m -s /bin/bash dev \
    && usermod -aG sudo dev \
    && echo 'dev ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Install additional development tools
RUN apt-get update && apt-get install -y \
    docker.io \
    docker-compose \
    kubectl \
    helm \
    terraform \
    ansible \
    && rm -rf /var/lib/apt/lists/*

# Install cloud CLIs
RUN curl -sL https://aka.ms/InstallAzureCLIDeb | bash \
    && curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" \
    && unzip awscliv2.zip \
    && ./aws/install \
    && rm -rf aws awscliv2.zip

# Install database clients
RUN apt-get update && apt-get install -y \
    postgresql-client \
    redis-tools \
    mongodb-clients \
    && rm -rf /var/lib/apt/lists/*

# Set up development environment
USER dev
WORKDIR /home/dev

# Configure Git (will be overridden by mounted config)
RUN git config --global init.defaultBranch main \
    && git config --global user.name "MCP v2 Developer" \
    && git config --global user.email "dev@mcp-v2.local"

# Install additional Node.js tools
RUN npm install -g \
    @types/node \
    eslint \
    prettier \
    jest \
    vitest \
    tsx \
    concurrently \
    cross-env

# Install Python development tools
RUN python3 -m pip install --user \
    black \
    flake8 \
    mypy \
    pytest \
    pytest-cov \
    jupyter \
    ipython \
    requests \
    fastapi \
    uvicorn \
    pydantic \
    sqlalchemy \
    alembic

# Set environment variables
ENV JAVA_HOME=/usr/lib/jvm/java-${JAVA_VERSION}-openjdk-amd64
ENV MAVEN_HOME=/usr/share/maven
ENV GRADLE_HOME=/usr/share/gradle
ENV PATH=/usr/local/go/bin:/home/dev/.cargo/bin:$PATH
ENV WORKSPACE_ROOT=/workspace

# Create workspace directory
RUN mkdir -p ${WORKSPACE_ROOT}
WORKDIR ${WORKSPACE_ROOT}

# Set up shell environment
RUN echo 'export PS1="\u@repo-os:\w$ "' >> /home/dev/.bashrc \
    && echo 'cd ${WORKSPACE_ROOT}' >> /home/dev/.bashrc \
    && echo 'echo "ðŸš€ MCP v2 Repository-OS Development Environment"' >> /home/dev/.bashrc \
    && echo 'echo "ðŸ“‚ Workspace: ${WORKSPACE_ROOT}"' >> /home/dev/.bashrc \
    && echo 'echo "ðŸ”§ Available: Node.js $(node --version), Java $(java --version | head -1), Python $(python3 --version)"' >> /home/dev/.bashrc

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Default command
CMD ["/bin/bash"]

# =================================================================
# PRODUCTION STAGE (Minimal runtime)
# =================================================================
FROM base as production

ARG USER_ID=1000
ARG GROUP_ID=1000

# Create application user
RUN groupadd -g ${GROUP_ID} app \
    && useradd -l -u ${USER_ID} -g app -m -s /bin/bash app

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    nodejs \
    openjdk-21-jre-headless \
    python3 \
    && rm -rf /var/lib/apt/lists/*

USER app
WORKDIR /app

# Copy built artifacts (to be populated by CI/CD)
COPY --chown=app:app dist/ ./

CMD ["node", "index.js"]
