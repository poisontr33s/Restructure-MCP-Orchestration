version: '3.8'

# MCP v2 Shared Infrastructure
# Complete deployment stack for MCP v2 protocol foundation

services:
  # ============================================================================
  # Data Storage Layer
  # ============================================================================
  
  redis:
    image: redis:latest
    container_name: mcp-v2-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-mcpv2_redis_pass}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mcp-v2-network

  postgres:
    image: postgres:15-alpine
    container_name: mcp-v2-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: mcp_v2
      POSTGRES_USER: mcp_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mcpv2_postgres_pass}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp_user -d mcp_v2"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mcp-v2-network

  # ============================================================================
  # Message Queue and Event Streaming
  # ============================================================================
  
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: mcp-v2-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: mcp_user
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-mcpv2_rabbitmq_pass}
      RABBITMQ_DEFAULT_VHOST: mcp_v2
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mcp-v2-network

  # ============================================================================
  # Monitoring and Observability
  # ============================================================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-v2-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mcp-v2-network

  grafana:
    image: grafana/grafana:latest
    container_name: mcp-v2-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-mcpv2_grafana_pass}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./config/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - mcp-v2-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: mcp-v2-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # gRPC
      - "14268:14268" # HTTP
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
    networks:
      - mcp-v2-network

  # ============================================================================
  # Core MCP v2 Services
  # ============================================================================
  
  mcp-bridge-server:
    build:
      context: ./mcp-servers/bridge
      dockerfile: Dockerfile
    container_name: mcp-v2-bridge-server
    restart: unless-stopped
    ports:
      - "8080:8080"   # HTTP JSON-RPC
      - "8081:8081"   # WebSocket
      - "8082:8082"   # gRPC
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://mcp_user:${POSTGRES_PASSWORD:-mcpv2_postgres_pass}@postgres:5432/mcp_v2
      - RABBITMQ_URL=amqp://mcp_user:${RABBITMQ_PASSWORD:-mcpv2_rabbitmq_pass}@rabbitmq:5672/mcp_v2
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - LOG_LEVEL=info
    volumes:
      - ./config/bridge-server.yml:/app/config.yml:ro
    depends_on:
      - redis
      - postgres
      - rabbitmq
      - jaeger
    networks:
      - mcp-v2-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  mcp-context-server:
    build:
      context: ./mcp-servers/context
      dockerfile: Dockerfile
    container_name: mcp-v2-context-server
    restart: unless-stopped
    ports:
      - "8083:8080"   # HTTP JSON-RPC
      - "8084:8081"   # WebSocket
      - "8085:8082"   # gRPC
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://mcp_user:${POSTGRES_PASSWORD:-mcpv2_postgres_pass}@postgres:5432/mcp_v2
      - ML_ENGINE_URL=http://mcp-ml-engine:8080
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - LOG_LEVEL=info
    volumes:
      - ./config/context-server.yml:/app/config.yml:ro
    depends_on:
      - redis
      - postgres
      - jaeger
    networks:
      - mcp-v2-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  mcp-docs-server:
    build:
      context: ./mcp-servers/docs
      dockerfile: Dockerfile
    container_name: mcp-v2-docs-server
    restart: unless-stopped
    ports:
      - "8086:8080"   # HTTP JSON-RPC
      - "8087:8081"   # WebSocket
      - "8088:8082"   # gRPC
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://mcp_user:${POSTGRES_PASSWORD:-mcpv2_postgres_pass}@postgres:5432/mcp_v2
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - LOG_LEVEL=info
    volumes:
      - ./config/docs-server.yml:/app/config.yml:ro
      - ./docs-index:/app/docs-index:ro
    depends_on:
      - redis
      - postgres
      - jaeger
    networks:
      - mcp-v2-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # AI/ML Services
  # ============================================================================
  
  mcp-ml-engine:
    build:
      context: ./ml-engine
      dockerfile: Dockerfile
    container_name: mcp-v2-ml-engine
    restart: unless-stopped
    ports:
      - "8089:8080"   # HTTP API
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://mcp_user:${POSTGRES_PASSWORD:-mcpv2_postgres_pass}@postgres:5432/mcp_v2
      - MODEL_CACHE_SIZE=2GB
      - TORCH_THREADS=4
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - LOG_LEVEL=info
    volumes:
      - ./ml-models:/app/models:ro
      - ml_cache:/app/cache
    depends_on:
      - redis
      - postgres
    networks:
      - mcp-v2-network
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 30s
      retries: 3

  # ============================================================================
  # API Gateway and Load Balancer
  # ============================================================================
  
  nginx:
    image: nginx:alpine
    container_name: mcp-v2-nginx
    restart: unless-stopped
    ports:
      - "80:80"       # HTTP
      - "443:443"     # HTTPS
      - "8090:8090"   # WebSocket proxy
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - ./static:/usr/share/nginx/html:ro
    depends_on:
      - mcp-bridge-server
      - mcp-context-server
      - mcp-docs-server
    networks:
      - mcp-v2-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Development and Testing Tools
  # ============================================================================
  
  mcp-dev-tools:
    build:
      context: ./dev-tools
      dockerfile: Dockerfile
    container_name: mcp-v2-dev-tools
    restart: unless-stopped
    ports:
      - "8091:8080"   # Dev tools UI
    environment:
      - MCP_GATEWAY_URL=http://nginx:80
      - ENABLE_DEBUG=true
    volumes:
      - ./test-data:/app/test-data:ro
      - ./scripts:/app/scripts:ro
    depends_on:
      - nginx
    networks:
      - mcp-v2-network
    profiles:
      - development

  # ============================================================================
  # Additional Services (Optional)
  # ============================================================================
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: mcp-v2-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - mcp-v2-network
    profiles:
      - search

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: mcp-v2-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - mcp-v2-network
    profiles:
      - search

# ============================================================================
# Networks and Volumes
# ============================================================================

networks:
  mcp-v2-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  ml_cache:
    driver: local
  elasticsearch_data:
    driver: local

# ============================================================================
# Usage Examples
# ============================================================================

# Start core infrastructure:
# docker-compose up -d redis postgres rabbitmq prometheus grafana jaeger

# Start MCP v2 services:
# docker-compose up -d mcp-bridge-server mcp-context-server mcp-docs-server mcp-ml-engine

# Start with load balancer:
# docker-compose up -d nginx

# Development mode with debug tools:
# docker-compose --profile development up -d

# Full stack with search capabilities:
# docker-compose --profile search up -d

# Scale specific services:
# docker-compose up -d --scale mcp-bridge-server=3

# View logs:
# docker-compose logs -f mcp-bridge-server

# Health check all services:
# docker-compose ps

# Stop everything:
# docker-compose down

# Remove all data (CAUTION):
# docker-compose down -v
