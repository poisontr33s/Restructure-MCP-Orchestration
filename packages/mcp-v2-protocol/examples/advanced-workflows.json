{
  "streaming_operations": {
    "description": "Examples of streaming operations for long-running tasks",
    "websocket_stream": {
      "description": "WebSocket streaming for real-time build output",
      "initial_request": {
        "id": "req-stream-001",
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "build_system",
          "action": "compile",
          "arguments": {
            "project": "/workspace/large-project",
            "targets": ["clean", "compile", "test", "package"],
            "streaming": true
          }
        },
        "context": {
          "sessionId": "session-build-stream",
          "taskType": "java-development",
          "preferences": {
            "verbosity": "detailed"
          }
        }
      },
      "initial_response": {
        "id": "req-stream-001",
        "jsonrpc": "2.0",
        "result": {
          "streamId": "stream-build-001",
          "message": "Build started - streaming output enabled",
          "estimatedDuration": 120000
        }
      },
      "stream_notifications": [
        {
          "jsonrpc": "2.0",
          "method": "tool/output-stream",
          "params": {
            "requestId": "req-stream-001",
            "streamId": "stream-build-001",
            "chunk": "[INFO] Scanning for projects...\n",
            "timestamp": "2025-01-27T10:00:01Z",
            "progress": 0.05,
            "isComplete": false
          }
        },
        {
          "jsonrpc": "2.0",
          "method": "tool/output-stream",
          "params": {
            "requestId": "req-stream-001",
            "streamId": "stream-build-001",
            "chunk": "[INFO] Building mcp-core 1.0.0-SNAPSHOT\n",
            "timestamp": "2025-01-27T10:00:15Z",
            "progress": 0.25,
            "isComplete": false
          }
        },
        {
          "jsonrpc": "2.0",
          "method": "tool/output-stream",
          "params": {
            "requestId": "req-stream-001",
            "streamId": "stream-build-001",
            "chunk": "[INFO] Tests run: 45, Failures: 0, Errors: 0, Skipped: 0\n",
            "timestamp": "2025-01-27T10:01:30Z",
            "progress": 0.85,
            "isComplete": false
          }
        },
        {
          "jsonrpc": "2.0",
          "method": "tool/output-stream",
          "params": {
            "requestId": "req-stream-001",
            "streamId": "stream-build-001",
            "chunk": "[INFO] BUILD SUCCESS - Total time: 2m 15s\n",
            "timestamp": "2025-01-27T10:02:15Z",
            "progress": 1.0,
            "isComplete": true,
            "finalResult": {
              "exitCode": 0,
              "artifacts": [
                {
                  "type": "file",
                  "name": "target/mcp-core-1.0.0-SNAPSHOT.jar",
                  "size": 2468014
                }
              ]
            }
          }
        }
      ]
    },
    "grpc_stream": {
      "description": "gRPC streaming for batch file processing",
      "request": {
        "id": "req-grpc-stream-001",
        "method": "files/process-batch",
        "params": {
          "operation": "analyze",
          "files": [
            "/workspace/src/main/java/com/example/Service1.java",
            "/workspace/src/main/java/com/example/Service2.java",
            "/workspace/src/main/java/com/example/Service3.java"
          ],
          "analysisType": "complexity-metrics"
        },
        "context": {
          "sessionId": "session-analysis-001",
          "taskType": "system-architecture"
        }
      },
      "stream_responses": [
        {
          "request_id": "req-grpc-stream-001",
          "chunk": {
            "data": {
              "file": "/workspace/src/main/java/com/example/Service1.java",
              "metrics": {
                "cyclomaticComplexity": 3,
                "linesOfCode": 85,
                "methodCount": 5,
                "dependencyCount": 8
              },
              "issues": [
                {
                  "severity": "warning",
                  "message": "Method exceeds recommended length",
                  "line": 45
                }
              ]
            }
          },
          "metadata": {
            "progress": 0.33,
            "timestamp": "2025-01-27T10:00:05Z"
          }
        },
        {
          "request_id": "req-grpc-stream-001",
          "chunk": {
            "data": {
              "file": "/workspace/src/main/java/com/example/Service2.java",
              "metrics": {
                "cyclomaticComplexity": 7,
                "linesOfCode": 142,
                "methodCount": 8,
                "dependencyCount": 12
              },
              "issues": [
                {
                  "severity": "error",
                  "message": "High cyclomatic complexity detected",
                  "line": 78
                }
              ]
            }
          },
          "metadata": {
            "progress": 0.67,
            "timestamp": "2025-01-27T10:00:08Z"
          }
        },
        {
          "request_id": "req-grpc-stream-001",
          "chunk": {
            "complete": {
              "final_result": {
                "totalFiles": 3,
                "totalIssues": 5,
                "averageComplexity": 4.33,
                "summary": "Analysis completed successfully"
              },
              "metrics": {
                "processing_time_ms": 8500,
                "cpu_time_ms": 5200,
                "memory_usage_bytes": 67108864
              }
            }
          },
          "metadata": {
            "progress": 1.0,
            "timestamp": "2025-01-27T10:00:12Z"
          }
        }
      ]
    }
  },
  "batch_operations": {
    "description": "Batch processing examples for multiple related operations",
    "http_batch": {
      "description": "HTTP batch request for multiple tool operations",
      "request": [
        {
          "id": "batch-001-1",
          "jsonrpc": "2.0",
          "method": "tools/call",
          "params": {
            "name": "git_manager",
            "action": "status",
            "arguments": {
              "repository": "/workspace/mcp-orchestration"
            }
          }
        },
        {
          "id": "batch-001-2",
          "jsonrpc": "2.0",
          "method": "tools/call",
          "params": {
            "name": "dependency_analyzer",
            "action": "check-updates",
            "arguments": {
              "project": "/workspace/mcp-orchestration",
              "includeSnapshots": false
            }
          }
        },
        {
          "id": "batch-001-3",
          "jsonrpc": "2.0",
          "method": "context/retrieve",
          "params": {
            "key": "last-build-status",
            "includeMetadata": true
          }
        }
      ],
      "response": [
        {
          "id": "batch-001-1",
          "jsonrpc": "2.0",
          "result": {
            "output": "On branch main\nYour branch is up to date with 'origin/main'.\n\nChanges not staged for commit:\n  modified:   pom.xml",
            "exitCode": 0,
            "artifacts": [
              {
                "type": "data",
                "name": "git-status",
                "content": "{\"branch\": \"main\", \"modified\": [\"pom.xml\"], \"untracked\": []}"
              }
            ]
          }
        },
        {
          "id": "batch-001-2",
          "jsonrpc": "2.0",
          "result": {
            "output": "Found 3 dependency updates available",
            "exitCode": 0,
            "artifacts": [
              {
                "type": "data",
                "name": "dependency-updates",
                "content": "{\"updates\": [{\"group\": \"org.springframework.boot\", \"artifact\": \"spring-boot-starter\", \"current\": \"3.2.1\", \"latest\": \"3.2.2\"}]}"
              }
            ]
          }
        },
        {
          "id": "batch-001-3",
          "jsonrpc": "2.0",
          "result": {
            "operation": "retrieve",
            "data": {
              "status": "success",
              "timestamp": "2025-01-27T09:45:00Z",
              "duration": 125000,
              "tests": {
                "passed": 42,
                "failed": 0,
                "skipped": 3
              }
            },
            "relevance": 0.95
          }
        }
      ]
    }
  },
  "intelligence_workflows": {
    "description": "AI-enhanced workflow examples with context awareness",
    "adaptive_debugging": {
      "description": "Adaptive debugging workflow based on user expertise and context",
      "beginner_flow": {
        "user_context": {
          "expertise": "beginner",
          "taskType": "debugging",
          "preferences": {
            "verbosity": "comprehensive",
            "errorHandling": "graceful"
          }
        },
        "request": {
          "id": "debug-beginner-001",
          "jsonrpc": "2.0",
          "method": "intelligence/enhance",
          "params": {
            "operation": "debug-analysis",
            "input": {
              "error": "java.lang.NullPointerException",
              "stackTrace": "at com.example.Service.process(Service.java:42)",
              "code": "public void process(User user) { String name = user.getName().toUpperCase(); }"
            }
          },
          "context": {
            "sessionId": "debug-session-001",
            "expertise": "beginner",
            "taskType": "debugging"
          }
        },
        "response": {
          "id": "debug-beginner-001",
          "jsonrpc": "2.0",
          "result": {
            "enhanced": true,
            "insights": [
              {
                "type": "potential-issue",
                "message": "NullPointerException occurs when user.getName() returns null",
                "confidence": 0.95,
                "actionable": true
              }
            ],
            "recommendations": [
              {
                "action": "Add null check before calling getName()",
                "rationale": "This prevents the NullPointerException from occurring. Always check if objects are null before calling methods on them.",
                "priority": "high",
                "effort": "low",
                "impact": "high",
                "codeExample": "if (user != null && user.getName() != null) { String name = user.getName().toUpperCase(); }"
              },
              {
                "action": "Learn about Optional<T> for better null handling",
                "rationale": "Optional is a modern Java approach to handle potentially null values safely",
                "priority": "medium",
                "effort": "medium",
                "impact": "high",
                "learningResources": [
                  "https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html",
                  "Java Optional Best Practices Guide"
                ]
              }
            ],
            "confidence": 0.92
          },
          "intelligence": {
            "adaptationApplied": true,
            "learningSignals": [
              {
                "type": "usage-pattern",
                "value": "beginner-debugging-nullpointer",
                "weight": 1.0,
                "timestamp": "2025-01-27T10:10:00Z"
              }
            ],
            "nextActions": [
              "Practice null checking patterns",
              "Review Java defensive programming techniques",
              "Set up IDE warnings for potential null pointer issues"
            ]
          }
        }
      },
      "expert_flow": {
        "user_context": {
          "expertise": "expert",
          "taskType": "debugging",
          "preferences": {
            "verbosity": "minimal",
            "errorHandling": "strict"
          }
        },
        "request": {
          "id": "debug-expert-001",
          "jsonrpc": "2.0",
          "method": "intelligence/enhance",
          "params": {
            "operation": "debug-analysis",
            "input": {
              "error": "java.lang.NullPointerException",
              "stackTrace": "at com.example.Service.process(Service.java:42)",
              "code": "public void process(User user) { String name = user.getName().toUpperCase(); }"
            }
          },
          "context": {
            "sessionId": "debug-session-002",
            "expertise": "expert",
            "taskType": "debugging"
          }
        },
        "response": {
          "id": "debug-expert-001",
          "jsonrpc": "2.0",
          "result": {
            "enhanced": true,
            "insights": [
              {
                "type": "optimization-opportunity",
                "message": "Consider Optional<String> return type and method chaining",
                "confidence": 0.85,
                "actionable": true
              },
              {
                "type": "pattern-detection",
                "message": "Potential Builder pattern violation - missing validation",
                "confidence": 0.75,
                "actionable": true
              }
            ],
            "recommendations": [
              {
                "action": "Implement Optional chaining: Optional.ofNullable(user).map(User::getName).map(String::toUpperCase)",
                "rationale": "Functional approach with better null safety",
                "priority": "high",
                "effort": "low",
                "impact": "medium"
              },
              {
                "action": "Add @Nullable/@NonNull annotations and enable static analysis",
                "rationale": "Compile-time null safety verification",
                "priority": "medium",
                "effort": "low",
                "impact": "high"
              }
            ],
            "confidence": 0.88
          },
          "intelligence": {
            "adaptationApplied": true,
            "learningSignals": [
              {
                "type": "usage-pattern",
                "value": "expert-debugging-functional-approach",
                "weight": 0.9,
                "timestamp": "2025-01-27T10:15:00Z"
              }
            ],
            "nextActions": [
              "Review codebase for similar patterns",
              "Consider implementing custom validation framework",
              "Evaluate static analysis tool integration"
            ]
          }
        }
      }
    }
  }
}
