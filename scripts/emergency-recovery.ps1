#!/usr/bin/env pwsh

<#
.SYNOPSIS
    Emergency Session Recovery Script
.DESCRIPTION
    Systematically recovers from Gemini CLI authentication and session loop issues
.NOTES
    Generated by Session Integrity Debugger - Execute immediately
#>

param(
    [Parameter(Mandatory=$false)]
    [string]$GeminiApiKey,
    
    [Parameter(Mandatory=$false)]
    [switch]$UseGoogleCloud,
    
    [Parameter(Mandatory=$false)]
    [switch]$UseWebLogin,
    
    [Parameter(Mandatory=$false)]
    [switch]$DryRun
)

function Write-Status {
    param($Message, $Type = "INFO")
    $color = switch ($Type) {
        "SUCCESS" { "Green" }
        "WARNING" { "Yellow" }
        "ERROR" { "Red" }
        default { "Cyan" }
    }
    Write-Host "[$Type] $Message" -ForegroundColor $color
}

function Test-GeminiResponse {
    param($TestMessage = "Health check: Please respond with just 'OK'")
    
    try {
        $response = echo $TestMessage | gemini 2>&1
        if ($response -match "OK" -or $response -match "health|test|check") {
            return $true
        }
        return $false
    } catch {
        return $false
    }
}

# Phase 1: Emergency Session Reset
Write-Status "üö® PHASE 1: Emergency Session Reset" "WARNING"

Write-Status "Step 1: Killing stuck Node processes..."
if (-not $DryRun) {
    try {
        Get-Process -Name node -ErrorAction SilentlyContinue | Stop-Process -Force
        Write-Status "‚úÖ Node processes terminated" "SUCCESS"
    } catch {
        Write-Status "‚ö†Ô∏è No Node processes found or failed to terminate" "WARNING"
    }
} else {
    Write-Status "DRY RUN: Would kill Node processes"
}

Write-Status "Step 2: Clearing Gemini error cache..."
if (-not $DryRun) {
    try {
        $errorFiles = Get-ChildItem "$env:TEMP\gemini-client-error-*" -ErrorAction SilentlyContinue
        $errorFiles | Remove-Item -Force
        Write-Status "‚úÖ Cleared $($errorFiles.Count) error files" "SUCCESS"
    } catch {
        Write-Status "‚ö†Ô∏è Failed to clear some error files" "WARNING"
    }
} else {
    $errorCount = (Get-ChildItem "$env:TEMP\gemini-client-error-*" -ErrorAction SilentlyContinue).Count
    Write-Status "DRY RUN: Would clear $errorCount error files"
}

Write-Status "Step 3: Backing up VS Code session..."
if (-not $DryRun) {
    try {
        if (-not (Test-Path "session-backup")) {
            New-Item -ItemType Directory -Path "session-backup" | Out-Null
        }
        code --list-extensions > session-backup\extensions.txt
        Get-ChildItem Env: | Out-File session-backup\env-state.txt
        Write-Status "‚úÖ Session backed up to session-backup/" "SUCCESS"
    } catch {
        Write-Status "‚ö†Ô∏è Backup partially failed" "WARNING"
    }
} else {
    Write-Status "DRY RUN: Would backup session to session-backup/"
}

# Phase 2: Authentication Setup
Write-Status "üîë PHASE 2: Authentication Setup" "WARNING"

if ($UseWebLogin) {
    Write-Status "Setting up Google AI Studio web authentication..."
    Write-Status "This will open your browser for account selection" "INFO"
    if (-not $DryRun) {
        try {
            Write-Status "Clearing any cached credentials first..."
            # Clear any existing cached credentials that might be causing issues
            $geminiConfigPath = "$env:USERPROFILE\.gemini"
            if (Test-Path $geminiConfigPath) {
                Remove-Item $geminiConfigPath -Recurse -Force -ErrorAction SilentlyContinue
                Write-Status "‚úÖ Cleared cached Gemini credentials" "SUCCESS"
            }
            
            Write-Status "Starting interactive Gemini CLI for web login..."
            Write-Status "üåê Browser will open - select your Pro account" "INFO"
            Write-Status "‚è≥ After selecting account, close the CLI and re-run this script" "WARNING"
            
            # Start Gemini CLI which will prompt for web authentication
            Start-Process -FilePath "C:\Users\erdno\AppData\Roaming\npm\gemini.cmd" -Wait
            
            Write-Status "‚úÖ Web authentication flow completed" "SUCCESS"
            Write-Status "Note: Gemini CLI now has your selected account credentials" "INFO"
        } catch {
            Write-Status "‚ùå Web authentication failed: $($_.Exception.Message)" "ERROR"
            Write-Status "Please run manually: C:\Users\erdno\AppData\Roaming\npm\gemini.cmd" "WARNING"
        }
    } else {
        Write-Status "DRY RUN: Would start Gemini CLI for web authentication"
        Write-Status "DRY RUN: Browser would open for account selection"
    }
} elseif ($GeminiApiKey) {
    Write-Status "Setting up API Key authentication..."
    if (-not $DryRun) {
        $env:GEMINI_API_KEY = $GeminiApiKey
        [Environment]::SetEnvironmentVariable("GEMINI_API_KEY", $GeminiApiKey, "User")
        Write-Status "‚úÖ API Key set (restart terminal for persistence)" "SUCCESS"
    } else {
        Write-Status "DRY RUN: Would set GEMINI_API_KEY"
    }
} elseif ($UseGoogleCloud) {
    Write-Status "Setting up Google Cloud authentication..."
    if (-not $DryRun) {
        try {
            Write-Status "Running: gcloud auth application-default login"
            gcloud auth application-default login
            Write-Status "‚úÖ Google Cloud authentication completed" "SUCCESS"
        } catch {
            Write-Status "‚ùå Google Cloud authentication failed" "ERROR"
            Write-Status "Please run manually: gcloud auth application-default login" "WARNING"
        }
    } else {
        Write-Status "DRY RUN: Would run gcloud auth application-default login"
    }
} else {
    Write-Status "‚ö†Ô∏è No authentication method specified" "WARNING"
    Write-Status "Recommended: Use -UseWebLogin for Pro account switching" "INFO"
    Write-Status "Alternative: Provide -GeminiApiKey or use -UseGoogleCloud" "WARNING"
    Write-Status "Or run manually: C:\Users\erdno\AppData\Roaming\npm\gemini.cmd" "INFO"
}

# Phase 3: Session Restoration & Testing
Write-Status "üß™ PHASE 3: Session Restoration & Testing" "WARNING"

Start-Sleep -Seconds 2

Write-Status "Testing authentication..."
if (-not $DryRun) {
    $authTest = Test-GeminiResponse "Authentication test: What is 2+2?"
    if ($authTest) {
        Write-Status "‚úÖ Authentication test PASSED" "SUCCESS"
    } else {
        Write-Status "‚ùå Authentication test FAILED" "ERROR"
        Write-Status "Check your API key or Google Cloud setup" "WARNING"
    }
} else {
    Write-Status "DRY RUN: Would test authentication"
}

Write-Status "Testing IDE integration..."
if (-not $DryRun -and $authTest) {
    $ideTest = Test-GeminiResponse "IDE test: Can you see my VS Code workspace?"
    if ($ideTest) {
        Write-Status "‚úÖ IDE integration test PASSED" "SUCCESS"
    } else {
        Write-Status "‚ö†Ô∏è IDE integration test inconclusive" "WARNING"
    }
} else {
    Write-Status "DRY RUN: Would test IDE integration"
}

Write-Status "Testing loop prevention..."
if (-not $DryRun -and $authTest) {
    $loopTest = Test-GeminiResponse "Loop test: Respond only with the word 'CLEAR'"
    if ($loopTest) {
        Write-Status "‚úÖ Loop prevention test PASSED" "SUCCESS"
    } else {
        Write-Status "‚ö†Ô∏è Loop prevention test inconclusive" "WARNING"
    }
} else {
    Write-Status "DRY RUN: Would test loop prevention"
}

# Final Status Report
Write-Status "üìä RECOVERY SUMMARY" "INFO"
Write-Status "==================" "INFO"

$envStatus = if ($env:GEMINI_API_KEY) { "‚úÖ Set" } else { "‚ùå Missing" }
Write-Status "GEMINI_API_KEY: $envStatus"

$processCount = (Get-Process -Name node -ErrorAction SilentlyContinue).Count
Write-Status "Node Processes: $processCount running"

$errorCount = (Get-ChildItem "$env:TEMP\gemini-client-error-*" -ErrorAction SilentlyContinue).Count
Write-Status "Error Files: $errorCount remaining"

if (-not $DryRun) {
    if ($authTest -and $ideTest -and $loopTest) {
        Write-Status "üéâ RECOVERY COMPLETE - All systems operational!" "SUCCESS"
        Write-Status "You can now use: echo 'your message' | gemini" "SUCCESS"
    } elseif ($authTest) {
        Write-Status "‚úÖ Basic recovery successful, some features may need attention" "SUCCESS"
        Write-Status "Try: echo 'Hello Gemini!' | gemini" "SUCCESS"
    } else {
        Write-Status "‚ùå Recovery incomplete - manual intervention required" "ERROR"
        Write-Status "Please check the SESSION-INTEGRITY-RECOVERY-GUIDE.md" "WARNING"
    }
}

Write-Host ""
Write-Status "Next steps:" "INFO"
Write-Status "üåü RECOMMENDED: For Pro users, use the dedicated switcher:" "PRO"
Write-Status "   pwsh -File scripts/gemini-pro-switcher.ps1" "PRO"
Write-Status "üìù Alternative: Test manually: Write-Output 'Hello' | gemini" "INFO"
Write-Status "üìö If issues persist, check SESSION-INTEGRITY-RECOVERY-GUIDE.md" "INFO"
Write-Status "üåê For new API keys: https://ai.google.dev/" "INFO"
