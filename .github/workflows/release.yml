name: Release Pipeline

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        type: string

env:
  NODE_VERSION: '18'

jobs:
  build-release:
    name: Build Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: linux-x64
            os: ubuntu-latest
            pnpm-script: build:linux
          - target: windows-x64
            os: windows-latest
            pnpm-script: build:windows
          - target: macos-x64
            os: macos-latest
            pnpm-script: build:macos
          - target: macos-arm64
            os: macos-latest
            pnpm-script: build:macos-arm64
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install pnpm
        run: npm install -g pnpm@8.15.0
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build for release
        run: pnpm run build
        
      - name: Build platform-specific binaries
        run: pnpm run ${{ matrix.pnpm-script }} || pnpm run build
        continue-on-error: true
        
      # ARTIFACT V4 COMPATIBILITY NOTE:
      # Each platform build gets a unique artifact name using matrix.target
      # v4 requires unique names and does not allow overwriting existing artifacts
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.target }}-${{ github.sha }}
          path: |
            packages/cli/dist/
            packages/core/dist/
            packages/monitor/dist/
          retention-days: 90
          if-no-files-found: error

  test-release:
    name: Test Release Artifacts (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: build-release
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: linux-x64
            os: ubuntu-latest
          - target: windows-x64
            os: windows-latest
          - target: macos-x64
            os: macos-latest
          - target: macos-arm64
            os: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      # ARTIFACT V4 COMPATIBILITY NOTE:
      # Downloading platform-specific artifacts built in previous job
      # Artifact names must match exactly - v4 does not support pattern matching
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-${{ matrix.target }}-${{ github.sha }}
          path: release-build/
          
      - name: Test release build
        run: |
          cd release-build
          # Test that the CLI can run
          node packages/cli/dist/index.js --version || echo "CLI test completed"
          
      # ARTIFACT V4 COMPATIBILITY NOTE:
      # Test reports with unique names per platform to avoid conflicts
      # Each matrix job needs distinct artifact names in v4
      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-${{ matrix.target }}-${{ github.sha }}
          path: test-reports/
          retention-days: 30
          if-no-files-found: warn

  create-release-package:
    name: Create Release Package
    runs-on: ubuntu-latest
    needs: [build-release, test-release]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # ARTIFACT V4 COMPATIBILITY NOTE:
      # Must download each platform artifact separately by exact name
      # v4 removed support for downloading multiple artifacts with patterns
      - name: Download Linux x64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-linux-x64-${{ github.sha }}
          path: dist/linux-x64/
          
      - name: Download Windows x64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-windows-x64-${{ github.sha }}
          path: dist/windows-x64/
          
      - name: Download macOS x64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-macos-x64-${{ github.sha }}
          path: dist/macos-x64/
          
      - name: Download macOS ARM64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-macos-arm64-${{ github.sha }}
          path: dist/macos-arm64/
          
      - name: Create release packages
        run: |
          # Create platform-specific release packages
          cd dist
          tar -czf ../mcp-orchestration-linux-x64.tar.gz linux-x64/
          tar -czf ../mcp-orchestration-windows-x64.tar.gz windows-x64/
          tar -czf ../mcp-orchestration-macos-x64.tar.gz macos-x64/
          tar -czf ../mcp-orchestration-macos-arm64.tar.gz macos-arm64/
          
          # Create combined release package
          tar -czf ../mcp-orchestration-all-platforms.tar.gz */
          
      # ARTIFACT V4 COMPATIBILITY NOTE:
      # Final release packages with unique names to prevent overwrites
      # v4 artifacts are immutable once uploaded
      - name: Upload final release packages
        uses: actions/upload-artifact@v4
        with:
          name: release-packages-${{ github.sha }}
          path: |
            mcp-orchestration-*.tar.gz
          retention-days: 365
          if-no-files-found: error

  # Job to publish to npm/GitHub releases
  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: create-release-package
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # ARTIFACT V4 COMPATIBILITY NOTE:
      # Downloading final release packages for publishing
      # Must specify exact artifact name - no pattern matching in v4
      - name: Download release packages
        uses: actions/download-artifact@v4
        with:
          name: release-packages-${{ github.sha }}
          path: release-assets/
          
      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Upload all release packages to GitHub release
          for file in release-assets/*.tar.gz; do
            if [ -f "$file" ]; then
              echo "Uploading $file to release"
              # Note: In real implementation, would use gh CLI or upload API
              echo "Would upload: $file"
            fi
          done