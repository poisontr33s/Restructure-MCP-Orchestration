name: Release Pipeline
permissions:
  contents: read

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-release:
    name: Build Release (${{ matrix.os }}, ${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: linux
            arch: x64
            runner: ubuntu-latest
          - os: linux
            arch: arm64
            runner: ubuntu-latest
          - os: windows
            arch: x64
            runner: windows-latest
          - os: macos
            arch: x64
            runner: macos-13
          - os: macos
            arch: arm64
            runner: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          architecture: ${{ matrix.arch }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build

      - name: Create CLI distribution
        run: |
          mkdir -p dist/cli-${{ matrix.os }}-${{ matrix.arch }}
          cp -r packages/cli/dist/* dist/cli-${{ matrix.os }}-${{ matrix.arch }}/
          cp packages/cli/package.json dist/cli-${{ matrix.os }}-${{ matrix.arch }}/
          cp README.md dist/cli-${{ matrix.os }}-${{ matrix.arch }}/

      - name: Create Core library distribution
        run: |
          mkdir -p dist/core-${{ matrix.os }}-${{ matrix.arch }}
          cp -r packages/core/dist/* dist/core-${{ matrix.os }}-${{ matrix.arch }}/
          cp packages/core/package.json dist/core-${{ matrix.os }}-${{ matrix.arch }}/

      - name: Create Monitor dashboard distribution
        run: |
          mkdir -p dist/monitor-${{ matrix.os }}-${{ matrix.arch }}
          cp -r packages/monitor/dist/* dist/monitor-${{ matrix.os }}-${{ matrix.arch }}/ || true
          cp packages/monitor/package.json dist/monitor-${{ matrix.os }}-${{ matrix.arch }}/

      - name: Create tarball
        run: |
          cd dist
          tar -czf mcp-orchestration-${{ matrix.os }}-${{ matrix.arch }}.tar.gz *

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            dist/mcp-orchestration-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
            dist/*/
          retention-days: 90

  create-npm-packages:
    name: Create NPM Packages (${{ matrix.package }})
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        package: [cli, core, monitor, shared]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build ${{ matrix.package }} package
        run: pnpm --filter @mcp/${{ matrix.package }} run build

      - name: Pack ${{ matrix.package }} package
        run: |
          cd packages/${{ matrix.package }}
          npm pack
          mv *.tgz ../../${{ matrix.package }}-package.tgz

      - name: Upload NPM package
        uses: actions/upload-artifact@v4
        with:
          name: npm-package-${{ matrix.package }}
          path: ${{ matrix.package }}-package.tgz
          retention-days: 90

  create-docker-images:
    name: Create Docker Images (${{ matrix.service }})
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        service: [cli, monitor]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build ${{ matrix.service }}
        run: pnpm --filter @mcp/${{ matrix.service }} run build

      - name: Create Dockerfile for ${{ matrix.service }}
        run: |
          cat > packages/${{ matrix.service }}/Dockerfile << 'EOF'
          FROM node:20-alpine
          WORKDIR /app
          COPY package.json ./
          COPY dist/ ./dist/
          RUN npm install --only=production
          EXPOSE 3000
          CMD ["node", "dist/index.js"]
          EOF

      - name: Build Docker image
        run: |
          cd packages/${{ matrix.service }}
          docker build -t mcp-${{ matrix.service }}:latest .
          docker save mcp-${{ matrix.service }}:latest | gzip > ../../mcp-${{ matrix.service }}-docker.tar.gz

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ matrix.service }}
          path: mcp-${{ matrix.service }}-docker.tar.gz
          retention-days: 30

  publish-release:
    name: Publish Release Assets
    runs-on: ubuntu-latest
    needs: [build-release, create-npm-packages, create-docker-images]
    if: github.event_name == 'release'

    steps:
      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release-*
          path: ./release-artifacts
          merge-multiple: false

      - name: Download all NPM packages
        uses: actions/download-artifact@v4
        with:
          pattern: npm-package-*
          path: ./npm-packages
          merge-multiple: false

      - name: Download all Docker images
        uses: actions/download-artifact@v4
        with:
          pattern: docker-image-*
          path: ./docker-images
          merge-multiple: false

      - name: Create release summary
        run: |
          echo "# Release Assets" > release-summary.md
          echo "## Platform Distributions" >> release-summary.md
          ls -la ./release-artifacts/ >> release-summary.md
          echo "## NPM Packages" >> release-summary.md
          ls -la ./npm-packages/ >> release-summary.md
          echo "## Docker Images" >> release-summary.md
          ls -la ./docker-images/ >> release-summary.md

      - name: Upload consolidated release assets
        uses: actions/upload-artifact@v4
        with:
          name: complete-release-${{ github.ref_name }}
          path: |
            release-summary.md
            ./release-artifacts/
            ./npm-packages/
            ./docker-images/
          retention-days: 365