openapi: 3.0.3
info:
  title: MCP v2 WebSocket Transport
  description: WebSocket transport layer for MCP v2 protocol with real-time bidirectional communication
  version: 2.0.0
  contact:
    name: MCP v2 Protocol Team
    url: https://mcp-v2.org
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: ws://localhost:8080/mcp/ws
    description: Local development WebSocket server
  - url: wss://api.mcp-v2.org/v2/ws
    description: Production WebSocket server (TLS)

paths:
  /ws:
    get:
      summary: WebSocket connection endpoint
      description: |
        Establish a WebSocket connection for real-time MCP v2 communication.
        
        **Message Flow:**
        1. Client connects to WebSocket endpoint
        2. Server sends welcome message with capabilities
        3. Client can send JSON-RPC 2.0 requests
        4. Server responds with JSON-RPC 2.0 responses
        5. Server can send notifications (method calls without id)
        6. Client can send heartbeat pings
        
        **Message Format:**
        All messages follow JSON-RPC 2.0 format with MCP v2 extensions.
        
        **Connection Lifecycle:**
        - Connect → Handshake → Active → (Heartbeat) → Disconnect
        
      operationId: connectWebSocket
      tags:
        - WebSocket
      parameters:
        - name: Connection
          in: header
          required: true
          schema:
            type: string
            enum: [Upgrade]
        - name: Upgrade
          in: header
          required: true
          schema:
            type: string
            enum: [websocket]
        - name: Sec-WebSocket-Key
          in: header
          required: true
          schema:
            type: string
        - name: Sec-WebSocket-Version
          in: header
          required: true
          schema:
            type: string
            enum: ["13"]
        - name: Sec-WebSocket-Protocol
          in: header
          required: false
          schema:
            type: string
            enum: ["mcp-v2", "mcp-v2.0"]
          description: MCP v2 WebSocket subprotocol
      responses:
        '101':
          description: WebSocket connection established
          headers:
            Connection:
              schema:
                type: string
                enum: [Upgrade]
            Upgrade:
              schema:
                type: string
                enum: [websocket]
            Sec-WebSocket-Accept:
              schema:
                type: string
            Sec-WebSocket-Protocol:
              schema:
                type: string
                enum: ["mcp-v2"]
        '400':
          description: Bad request - Invalid WebSocket headers
        '401':
          description: Unauthorized - Authentication required
        '403':
          description: Forbidden - Insufficient permissions
        '426':
          description: Upgrade Required - Must use WebSocket

components:
  schemas:
    # WebSocket Message Types
    WelcomeMessage:
      type: object
      description: Server welcome message sent after connection
      required: [jsonrpc, method, params]
      properties:
        jsonrpc:
          type: string
          const: "2.0"
        method:
          type: string
          const: "server/welcome"
        params:
          type: object
          required: [serverId, capabilities, protocol]
          properties:
            serverId:
              type: string
              description: Unique server identifier
            capabilities:
              type: array
              items:
                $ref: 'https://mcp-v2.org/schemas/metadata.json#/$defs/ServerCapability'
            protocol:
              $ref: 'https://mcp-v2.org/schemas/metadata.json#/$defs/ProtocolMetadata'
            features:
              type: object
              properties:
                heartbeat:
                  type: boolean
                  default: true
                notifications:
                  type: boolean
                  default: true
                streaming:
                  type: boolean
                  default: false
                compression:
                  type: boolean
                  default: false
      example:
        jsonrpc: "2.0"
        method: "server/welcome"
        params:
          serverId: "mcp-server-01"
          capabilities:
            - name: "tool-execution"
              version: "1.0"
              methods: ["tools/call", "tools/list"]
          protocol:
            version: "2.0"
            transport: "websocket"
            features: ["bidirectional", "heartbeat"]
          features:
            heartbeat: true
            notifications: true
            streaming: false

    ClientHandshake:
      type: object
      description: Client handshake message
      required: [jsonrpc, method, params]
      properties:
        jsonrpc:
          type: string
          const: "2.0"
        method:
          type: string
          const: "client/handshake"
        params:
          type: object
          required: [clientId, version]
          properties:
            clientId:
              type: string
              description: Unique client identifier
            version:
              type: string
              description: Client version
            capabilities:
              type: array
              items:
                type: string
              description: Client capabilities
            preferences:
              type: object
              properties:
                heartbeatInterval:
                  type: integer
                  description: Preferred heartbeat interval in seconds
                  default: 30
                compression:
                  type: boolean
                  default: false
                binaryMode:
                  type: boolean
                  default: false
      example:
        jsonrpc: "2.0"
        method: "client/handshake"
        params:
          clientId: "java-client-123"
          version: "1.0.0"
          capabilities: ["tool-execution", "context-management"]
          preferences:
            heartbeatInterval: 30
            compression: false

    RequestMessage:
      type: object
      description: Client request message
      allOf:
        - $ref: 'https://mcp-v2.org/schemas/request.json'
      example:
        id: "req-ws-001"
        jsonrpc: "2.0"
        method: "tools/call"
        params:
          name: "file_manager"
          action: "list"
          arguments:
            path: "/workspace"
        context:
          sessionId: "ws-session-123"
          taskType: "java-development"

    ResponseMessage:
      type: object
      description: Server response message
      allOf:
        - $ref: 'https://mcp-v2.org/schemas/response.json'
      example:
        id: "req-ws-001"
        jsonrpc: "2.0"
        result:
          output: "Files listed successfully"
          exitCode: 0
          artifacts:
            - type: "data"
              name: "file-list"
              content: "[\"/workspace/src\", \"/workspace/target\"]"

    NotificationMessage:
      type: object
      description: Server notification message (no response expected)
      required: [jsonrpc, method, params]
      properties:
        jsonrpc:
          type: string
          const: "2.0"
        method:
          type: string
          description: Notification method
          examples:
            - "server/status-change"
            - "tool/output-stream"
            - "context/update"
            - "intelligence/insight"
        params:
          type: object
          description: Notification parameters
        metadata:
          $ref: 'https://mcp-v2.org/schemas/metadata.json'
      examples:
        status_change:
          summary: Server status change notification
          value:
            jsonrpc: "2.0"
            method: "server/status-change"
            params:
              serverId: "tool-executor-01"
              oldStatus: "healthy"
              newStatus: "degraded"
              reason: "High memory usage"
              timestamp: "2025-01-27T10:15:00Z"
        tool_output:
          summary: Streaming tool output
          value:
            jsonrpc: "2.0"
            method: "tool/output-stream"
            params:
              requestId: "req-ws-001"
              chunk: "Processing file 5 of 100...\n"
              isComplete: false
        intelligence_insight:
          summary: AI insight notification
          value:
            jsonrpc: "2.0"
            method: "intelligence/insight"
            params:
              type: "optimization-opportunity"
              message: "Consider using parallel processing for this operation"
              confidence: 0.85
              actionable: true

    HeartbeatPing:
      type: object
      description: Client heartbeat ping
      required: [jsonrpc, method]
      properties:
        jsonrpc:
          type: string
          const: "2.0"
        method:
          type: string
          const: "heartbeat/ping"
        params:
          type: object
          properties:
            timestamp:
              type: string
              format: date-time
            clientStatus:
              type: string
              enum: [active, idle, busy]
      example:
        jsonrpc: "2.0"
        method: "heartbeat/ping"
        params:
          timestamp: "2025-01-27T10:00:00Z"
          clientStatus: "active"

    HeartbeatPong:
      type: object
      description: Server heartbeat pong response
      required: [jsonrpc, method]
      properties:
        jsonrpc:
          type: string
          const: "2.0"
        method:
          type: string
          const: "heartbeat/pong"
        params:
          type: object
          properties:
            timestamp:
              type: string
              format: date-time
            serverStatus:
              type: string
              enum: [healthy, degraded, unhealthy]
            load:
              type: object
              properties:
                cpu:
                  type: number
                  minimum: 0
                  maximum: 1
                memory:
                  type: number
                  minimum: 0
                  maximum: 1
                connections:
                  type: integer
      example:
        jsonrpc: "2.0"
        method: "heartbeat/pong"
        params:
          timestamp: "2025-01-27T10:00:01Z"
          serverStatus: "healthy"
          load:
            cpu: 0.25
            memory: 0.40
            connections: 15

    DisconnectMessage:
      type: object
      description: Graceful disconnect message
      required: [jsonrpc, method]
      properties:
        jsonrpc:
          type: string
          const: "2.0"
        method:
          type: string
          const: "connection/disconnect"
        params:
          type: object
          properties:
            reason:
              type: string
              enum: [client-shutdown, server-shutdown, error, timeout, rate-limit]
            message:
              type: string
              description: Human-readable disconnect reason
            reconnectAfter:
              type: integer
              description: Seconds to wait before reconnecting (if applicable)
      example:
        jsonrpc: "2.0"
        method: "connection/disconnect"
        params:
          reason: "server-shutdown"
          message: "Server maintenance scheduled"
          reconnectAfter: 300

    # Error Handling
    ConnectionError:
      type: object
      description: WebSocket connection error
      required: [jsonrpc, error]
      properties:
        id:
          oneOf:
            - type: string
            - type: "null"
        jsonrpc:
          type: string
          const: "2.0"
        error:
          type: object
          required: [code, message]
          properties:
            code:
              type: integer
              description: WebSocket-specific error codes
              enum:
                - -32001 # Authentication failed
                - -32002 # Connection refused
                - -32003 # Rate limit exceeded
                - -32004 # Protocol version mismatch
                - -32005 # Heartbeat timeout
                - -32006 # Message too large
                - -32007 # Unsupported feature
            message:
              type: string
            data:
              type: object
              properties:
                closeCode:
                  type: integer
                  description: WebSocket close code
                reconnect:
                  type: boolean
                  description: Whether client should attempt to reconnect
                retryAfter:
                  type: integer
                  description: Seconds to wait before retry

  # Message Examples for different scenarios
  examples:
    # Connection Flow
    connection_established:
      summary: Complete connection establishment
      value:
        welcome:
          jsonrpc: "2.0"
          method: "server/welcome"
          params:
            serverId: "mcp-server-prod-01"
            capabilities:
              - name: "tool-execution"
                version: "1.0"
                methods: ["tools/call", "tools/list", "tools/describe"]
              - name: "context-management"
                version: "1.0"
                methods: ["context/store", "context/retrieve"]
        handshake:
          jsonrpc: "2.0"
          method: "client/handshake"
          params:
            clientId: "vscode-extension-456"
            version: "2.1.0"
            capabilities: ["tool-execution", "context-management"]

    # Request/Response Flow
    tool_execution_flow:
      summary: Tool execution with streaming output
      value:
        request:
          id: "req-123"
          jsonrpc: "2.0"
          method: "tools/call"
          params:
            name: "build_system"
            action: "compile"
            arguments:
              project: "/workspace/java-project"
              target: "clean install"
        response:
          id: "req-123"
          jsonrpc: "2.0"
          result:
            output: "Build completed successfully"
            exitCode: 0
            artifacts:
              - type: "file"
                name: "build.log"
                content: "..."
        notifications:
          - jsonrpc: "2.0"
            method: "tool/output-stream"
            params:
              requestId: "req-123"
              chunk: "[INFO] Compiling sources...\n"
              isComplete: false
          - jsonrpc: "2.0"
            method: "tool/output-stream"
            params:
              requestId: "req-123"
              chunk: "[INFO] BUILD SUCCESS\n"
              isComplete: true

    # Error Scenarios
    error_scenarios:
      summary: Common error scenarios
      value:
        authentication_error:
          id: null
          jsonrpc: "2.0"
          error:
            code: -32001
            message: "Authentication failed"
            data:
              closeCode: 1008
              reconnect: false
        rate_limit_error:
          id: "req-456"
          jsonrpc: "2.0"
          error:
            code: -32003
            message: "Rate limit exceeded"
            data:
              retryAfter: 60
              reconnect: true

tags:
  - name: WebSocket
    description: WebSocket connection and messaging
  - name: Real-time
    description: Real-time bidirectional communication
  - name: Streaming
    description: Streaming data and notifications

externalDocs:
  description: WebSocket RFC 6455
  url: https://tools.ietf.org/html/rfc6455
